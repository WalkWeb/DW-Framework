<?php

namespace Models;

use Models\Exceptions\PostException;

/**
 * Данный класс имитирует данные из базы по постам, чтобы можно было продемонстрировать работу маршрутов/контроллеров с
 * какими-то данными без необходимости подключаться к реальной базе и запрашивать реальные данные
 *
 * @package Models
 */
class PostDataProvider
{
    /**
     * @var array - эмуляция данных по постам
     */
    private static $posts = [
        1  => ['id'  => 1, 'title' => 'Заголовок первого поста',    'text' => 'Содержимое первого поста'],
        2  => ['id'  => 2, 'title' => 'Заголовок второго поста',    'text' => 'Содержимое второго поста'],
        3  => ['id'  => 3, 'title' => 'Заголовок третьего поста',   'text' => 'Содержимое третьего поста'],
        4  => ['id'  => 4, 'title' => 'Заголовок червертого поста', 'text' => 'Содержимое червертого поста'],
        5  => ['id'  => 5, 'title' => 'Заголовок пятого поста',     'text' => 'Содержимое пятого поста'],
        6  => ['id'  => 6, 'title' => 'Заголовок шестого поста',    'text' => 'Содержимое шестого поста'],
        7  => ['id'  => 7, 'title' => 'Заголовок седьмого поста',   'text' => 'Содержимое седьмого поста'],
        8  => ['id'  => 8, 'title' => 'Заголовок восьмого поста',   'text' => 'Содержимое восьмого поста'],
        9  => ['id'  => 9, 'title' => 'Заголовок девятого поста',   'text' => 'Содержимое девятого поста'],
        10 => ['id' => 10, 'title' => 'Заголовок десятого поста',   'text' => 'Содержимое десятого поста'],
    ];

    /**
     * @return array
     */
    public static function getAllPosts(): array
    {
        return self::$posts;
    }

    /**
     * @param int $id
     * @return object
     * @throws PostException
     */
    public static function getPostById(int $id): object
    {
        if (empty(self::$posts[$id])) {
            throw new PostException('Указанного поста не существует', 404);
        }

        return (object)self::$posts[$id];
    }

}
